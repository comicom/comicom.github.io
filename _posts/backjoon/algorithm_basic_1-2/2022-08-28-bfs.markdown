---
layout: posts
title:  "Backjoon Algorithm 1-2: BFS"
date:   2022-08-28 14:10:28 +0900
categories: Backjoon
tags:
  - python
  - algorithm
  - bfs
---

# Introduction

## 1차원 그래프 BFS / DFS 순회

## 2차원 배열 BFS / DFS 순회

{% highlight python %}
class searching:
  def __init__(self,map):
    self._map = map
    self._cnt = 0
  def _dfs(self,row,col):
    # row 및 col이 map 범위를 벗어 났을 경우 중단
    if row < 0 or row >= len(self._map) or col < 0 or col >= len(self._map[0]):
      return
    # 탐색하지 않을 곳을 만났을 경우 중단
    if self._map[row][col] == '0':
      return
    # 재귀로 이동 구현
    self._dfs(row-1,col)        # 위로
    self._dfs(row+1,col)        # 아래로
    self._dfs(row,col-1)        # 왼쪽
    self._dfs(row,col+1)        # 오른쪽
  def search(self)
    # col x row 행렬을 전체 탐색
    #   (0,0)   ->   (0,1)   -> ... -> (0,row-1)
    #   (1,0)   ->   (1,1)   -> ... -> (1,row-1)
    #    ...    ->    ...    -> ... ->    ...
    # (col-1,0) -> (col-1,1) -> ... -> (col-1,row-1)
    for i in range(len(self._map)):
      for j in range(len(self._map[0])):
        # 탐색할 곳을 만났을 경우
        if self._map[i][j] == '1':
          self._cnt += 1
          self._dfs(i,j)
    return cnt
{% endhighlight %}