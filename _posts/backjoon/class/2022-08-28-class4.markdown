---
layout: posts
title:  "solved.ac: CLASS 4"
date:   2022-08-28 04:10:28 +0900
categories: Backjoon
tags:
  - python
  - algorithm
  - solved.ac
---

# Introduction

## 실버

## 골드

### 트리의 지름

트리의 지름이란, 트리에서 임의의 두 점 사이의 거리 중 가장 긴 것을 말한다. 트리의 지름을 구하는 프로그램을 작성하시오.

트리의 정점의 개수 V가 주어지고 (2 ≤ V ≤ 100,000)둘째 줄부터 V개의 줄에 걸쳐 간선의 정보가 다음과 7같이 주어진다.

-> DFS, BFS

문제 포인트

* BFS를 이용하여 부모노드의 거리를 자식노드에 더함, 노드가 끝날 때까지 반복
* 정점이 될 수 있는 종단 노드들을 이용한 트리 지름 중 가장 긴 것을 출력
* graph 참조를 어떻게 할 것인가?
  * copy.deepcopy()함수를 이용하지 않으면 사용자 지정 함수 내에서 사용한 graph 변수가 call by reference로 참조 됨 -> 시간초과
  * dummy graph 생성

#### 첫번째시도

deep copy 때문에 시간초과가 걸리는 것으로 보인다.

{% highlight python %}
import sys
import copy
from collections import deque
sys.setrecursionlimit(10**6)
input = sys.stdin.readline

V = int(input())

# graph 생성 및 종단 정점 저장
endpoint = []
graph = [[] for _ in range(V+1)]
for _ in range(V):
    lists = list(map(int,input().split()))
    for i in range(1,len(lists)-1,2):
        graph[lists[0]].append([lists[i],lists[i+1]])
    if len(graph[lists[0]]) == 1:
        endpoint.append(lists[0])

for g in graph:
    g.sort()

# distance를 bfs를 하면서 누적, 최댓값 출력
def bfs(graph,start):
    m_graph = copy.deepcopy(graph)
    check = [False]*(V+1)
    check[start] = True
    q = deque([(start,0)])
    diameter = 0
    while q:
        v,dist = q.popleft()
        for node in m_graph[v]:
            if check[node[0]] == False:
                check[node[0]] = True
                node[1] += dist
                if node[1] >= diameter:
                    diameter = node[1]
                q.extend([(node[0],node[1])])
    return diameter

M = 0
for e in endpoint:
    diameter = bfs(graph,e)
    if diameter > M:
        M = diameter

print(M)
{% endhighlight %}

### 후위 표기식

중위 표기식이 주어졌을 때 후위 표기식으로 고치는 프로그램을 작성하시오.

-> 그래프 문제, BFS ? DFS?

### 피보나치 수 6

-> 다이나믹 프로그래밍

### 파티

어느 날 이 N명의 학생이 X (1 ≤ X ≤ N)번 마을에 모여서 파티를 벌이기로 했다. 이 마을 사이에는 총 M개의 단방향 도로들이 있고 i번째 길을 지나는데 Ti(1 ≤ Ti ≤ 100)의 시간을 소비한다.

각각의 학생들은 파티에 참석하기 위해 걸어가서 다시 그들의 마을로 돌아와야 한다. 하지만 이 학생들은 워낙 게을러서 최단 시간에 오고 가기를 원한다.

-> 다익스트라

### 웜홀

TC개의 줄에 걸쳐서 만약에 시간이 줄어들면서 출발 위치로 돌아오는 것이 가능하면 YES, 불가능하면 NO를 출력한다.

-> ??

### 치즈

-> 그래프?